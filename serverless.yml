service: notes

frameworkVersion: "3"

plugins:
  - serverless-iam-roles-per-function # This plugin help us apply iamRoleStatement to each function so that we don't have to apply it at resource level as it woud be applied to each function then

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1

functions:
  authorizer:
    handler: functions/auth.handler

  createNote:
    handler: functions/createNote.handler
    events:
      - http:
          method: post
          path: notes
          authorizer: authorizer
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # This enables HTTP keep-alive that aws-sdk calls or http calls opened by the lambda will be kept alive for subsequent call so that it can resuse the connection, This helps reducing the latency due to pre-flight request or TLS handshake
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn # GetAtt is intrinsic function

  updateNote:
    handler: functions/updateNote.handler
    events:
      - http:
          method: put
          path: notes/{id}
          authorizer: authorizer
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn # GetAtt is intrinsic function

  deleteNote:
    handler: functions/deleteNote.handler
    events:
      - http:
          method: delete
          path: notes/{id}
          authorizer: authorizer
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn # GetAtt is intrinsic function

  getAllNotes:
    handler: functions/getAllNotes.handler
    events:
      - http:
          method: get
          path: notes
          authorizer:
            name: userpool_authorizer
            arn: arn:aws:cognito-idp:us-east-1:652152586723:userpool/us-east-1_pq9J83KpY
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt notesTable.Arn # GetAtt is intrinsic function

resources:
  Resources: ${file(resources.yml)}
